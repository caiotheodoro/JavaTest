---
title: "Relatório Trabalho Prático de Teste Baseado em Especificação"
subtitle: "Método para adição de números inteiros muito, muito grandes"
author: "Aluno Teste de Software"
toc: true
toc-title: Sumário
number-sections: false
highlight-style: pygments
format: 
  html:
    embed-resources: true

engine: knitr
---


## Introdução

Este documento descreve o processo de criação de casos de teste para o método `validateIdentifier` da classe `Identifier`. Nota-se que na classe também existe o método `valid_s` e `valid_f`, que são métodos auxiliares para a validação de identificadores, e também serao testados.

### Passo 1: Exploracao das classes e funcionamento de programa:

A principio percebemos que a classe recebe um parametro `String s`. Isso ja nos da uma ideia para os seguintes casos de teste:

- `s` é uma string nula
- `s` é uma string vazia
- `s` é uma string com um caracter
- `s` é uma string utf8 com acentos

Vendo mais a fundo as especificações da classe, onde " O programa deve determinar se um identificador é ou não válido em 'Silly Pascal' (uma estranha variante do Pascal). Um identificador válido deve comecar com uma letra e conter apenas letras ou dígitos. Além disso, deve ter no minimo 1 caractere e no maximo 6 caracteres de comprimento."

Podemos adicionar mais casos de teste:
- `s` começa com um número
- `s` contem caracteres especiais
- `s` contem letras e números
- `s` contem apenas letras
- `s` contem apenas números
- `s` é uma string com 5 caracteres
- `s` é uma string  com 6 caracteres
- `s` é uma string com 7 caracteres

Alguns casos podemos descartar, como por exemplo `s` começar com numero, pois ja sabemos que nao podemos instanciar a classe do identificador com um numero.

Por fim concluimos os casos de teste para este cenario.

### Passo 2: Identificando as particoes/classes de equivalencia

Agora que temos os casos de testes levantados, podemos subdividilos em particoes de equivalencia.

`V<=1 || V!=String`
- Particao 1 (Equivalencia de valores invalidos ):
  -   `s` é uma string nula
  -   `s` é uma string vazia
  -   `s` começa com um número
  -   `s` contem apenas números
  -   `s` é uma string com um caracter especial
  -   `s` contem caracteres especiais

`V>=1 && V<6 && V começando com letra`
- Particao 2(Equivalencia de valores validos):
  -   `s` é uma string com um caracter
  -   `s` contem letras e números
  -   `s` contem apenas letras
  -   `s` é uma string com 5 caracteres
  -  `s` é uma string  com 6 caracteres

  `V>6`
- Particao 3(Equivalencia de valores invalidos):
  -  `s` é uma string com 7 caracteres
  -  `s` é uma string com 7 caracteres contendo letras e numeros
  -  `s` é uma string com 7 caracteres contendo apenas letras

`V>=1 && V<6 && V contem caracter utf8`
- Particao 4(Equivalencia de valores invalidos):
  -  `s` é uma string com um caracter utf8 com acentos
  - `s` é uma string com um 1 a 5 com letras e numeros e caracteres utf8
  - `s` é uma string com um 1 a 5 com letras comecando com caracteres utf8



  ### Passo 3: Identificando valores limites

  - `s` é uma string com 1 caracter
  - `s` é uma string com 5 caracteres